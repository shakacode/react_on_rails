require "react_on_rails/utils"

module ReactOnRailsPro
  class Cache
    class << self
      # options[:cache_options] can include :compress, :expires_in, :race_condition_ttl and
      # other options
      def fetch_react_component(component_name, options)
        cache_key = react_component_cache_key(component_name, options)

        cache_options = options[:cache_options]
        Rails.cache.fetch(cache_key, cache_options) { yield }
      end

      # Cache keys by React on Rails Pro should build upon this base
      # Provide prerender: true in order to include bundle hash in the list of keys.
      # The bundle hash is necessary so that any changes to the bundle fault the cache.
      def base_cache_key(type, prerender: nil)
        keys = [
          type,
          ReactOnRails::VERSION,
          ReactOnRailsPro::VERSION
        ]

        # TODO: Move comment over to test
        # We only care about the bundle hash if prerendering because we're not caching anything
        # that would be generated by the bundle.
        keys.push(ReactOnRailsPro::Utils.bundle_hash) if prerender
        keys
      end

      def serializers_cache_key
        # https://github.com/shakacode/react_on_rails_pro/issues/32
        # https://github.com/shakacode/react_on_rails/issues/39#issuecomment-143472325
        return @serializer_checksum if @serializer_checksum.present? && !Rails.env.development?
        return nil unless ReactOnRailsPro.configuration.serializer_globs.present?

        serializer_files = Dir.glob(ReactOnRailsPro.configuration.serializer_globs)
        digest = Digest::MD5.new
        serializer_files.each { |f| digest.file(f) }
        @serializer_checksum = digest.hexdigest
      end

      def react_component_cache_key(component_name, options)
        # NOTE: Rails seems to do this automatically: ActiveSupport::Cache.expand_cache_key(keys)
        [
          *base_cache_key("ror_component", prerender: options[:prerender]),
          serializers_cache_key,
          component_name,
          options[:cache_key]
        ].compact
      end
    end
  end
end
