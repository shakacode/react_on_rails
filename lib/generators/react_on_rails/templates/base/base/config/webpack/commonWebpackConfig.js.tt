<%= add_documentation_reference(config[:message], "// https://github.com/shakacode/react_on_rails_demo_ssr_hmr/blob/master/config/webpack/commonWebpackConfig.js") %>

// Common configuration applying to client and server configuration
const { generateWebpackConfig, merge } = require('shakapacker');

// Try to load CSS plugins, but gracefully handle if they're not installed
let MiniCssExtractPlugin;
let cssLoaderAvailable = true;
try {
  MiniCssExtractPlugin = require('mini-css-extract-plugin');
  require.resolve('css-loader');
  require.resolve('style-loader');
} catch (error) {
  cssLoaderAvailable = false;
}

const baseClientWebpackConfig = generateWebpackConfig();

const commonOptions = {
  resolve: {
    extensions: ['.css', '.ts', '.tsx'],
  },
};

// Add CSS module rules - either with proper loaders or fallback
if (cssLoaderAvailable && MiniCssExtractPlugin) {
  // Full CSS modules support when loaders are available
  commonOptions.module = {
    rules: [
      {
        test: /\.module\.css$/i,
        use: [
          process.env.NODE_ENV === 'development' ? 'style-loader' : MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
            options: {
              modules: {
                localIdentName: '[name]__[local]__[hash:base64:5]',
              },
            },
          },
        ],
      },
    ],
  };
} else {
  // Fallback: ignore CSS files when loaders aren't available (for testing)
  commonOptions.module = {
    rules: [
      {
        test: /\.module\.css$/i,
        type: 'asset/resource',
        generator: {
          emit: false,
        },
      },
    ],
  };
}

// Copy the object using merge b/c the baseClientWebpackConfig and commonOptions are mutable globals
const commonWebpackConfig = () => merge({}, baseClientWebpackConfig, commonOptions);

module.exports = commonWebpackConfig;
