<%= render "header" %>

<%= react_component("MainPage", props: @app_props_server_render, prerender: true, trace: true, id: "MainPage-react-component-0") %>
<hr/>

<h1>React Rails Server Rendering</h1>
<p>
  This example demonstrates server side rendering. The only difference from client rendering is that
  the <code>prerender</code> option is true.<br/><br/>
  The source HTML of this page will only show a DIV with an ID matching MainPage.<br/>
  <pre>
    <%= '<div id="MainPage-react-component-0"><div data-reactid=".uwwa3eq70g" data-react-checksum="-1318287018">' %>
    <%= '<h3 data-reactid=".uwwa3eq70g.0"><span data-reactid=".uwwa3eq70g.0.0">Hello, </span><span data-reactid=".uwwa3eq70g.0.1">' %>
    <%= 'Mr. Server Side Rendering</span><span data-reactid=".uwwa3eq70g.0.2">!</span></h3><p data-reactid=".uwwa3eq70g.1">' %>
    <%= '<span data-reactid=".uwwa3eq70g.1.0">Say hello to:</span>' %>
    <%= '<input type="text" value="Mr. Server Side Rendering" data-reactid=".uwwa3eq70g.1.1"></p></div></div>' %>
    <%= '<script>' %>
    <%= 'console.log.apply(console, ["[SERVER] RENDERED MainPage with data_variable __mainPageData0__ to dom node with id: MainPage-react-component-0"]);' %>
    <%= 'console.log.apply(console, ["[SERVER] MainPage demonstrating a call to console.log in spec/dummy/client/app/components/MainPage.jsx:18"]);' %>
    <%= '/script>' %>
  </pre>
  Compare this to the HTML created for client-only
  rendering: <%= link_to "Main Page Component Client Rendered", client_side_main_page_path %>
  <br/>
  Be sure to open up your browser console. You'll see something like:
  <pre>
    [SERVER] RENDERED MainPage with data_variable __mainPageData0__ to dom node with id: MainPage-react-component-0
    [SERVER] MainPage demonstrating a call to console.log in spec/dummy/client/app/components/MainPage.jsx:18
    RENDERED MainPage with data_variable __mainPageData0__ to dom node with id: MainPage-react-component-0
    MainPage demonstrating a call to console.log in spec/dummy/client/app/components/MainPage.jsx:18
  </pre>
  Notice how any console essages on the server are prefixed with [SERVER].<br/>
  Also note on your server console, you'll see messages like this:
  <pre>
    [react_on_rails] RENDERED MainPage with data_variable __mainPageData0__ to dom node with id: MainPage-react-component-0
    [react_on_rails] MainPage demonstrating a call to console.log in spec/dummy/client/app/components/MainPage.jsx:18
  </pre>
</p>

<hr/>
<h2>Setup</h2>
<ol>
  <li>
    Create component source: spec/dummy/client/app/components/MainPage.jsx
  </li>
  <li>
    Expose the MainPage Component on the client side:
    spec/dummy/client/app/startup/clientRegistration.jsx
    <br/>
    <pre>
      import MainPage from '../components/MainPage';
      import ReactOnRails from 'react-on-rails';
      ReactOnRails.register({ MainPage });
    </pre>
  </li>
  <li>
    Expose the MainPage Component on the server side:
    spec/dummy/client/app/startup/serverRegistration.jsx
    <br/>
    <pre>
    import MainPage from '../components/MainPage';
    global.MainPage = MainPage;
    </pre>
  </li>
  <li>
    Place the component on the view: spec/dummy/app/views/pages/client_side_main_page.html.erb
    <br/>
    <pre>
    <%%= react_component("MainPage", props: @app_props_server_render, prerender: true, trace: true, id: "MainPage-react-component-0") %>
    </pre>
  </li>
</ol>
<hr/>
