version: 2

aliases:
  # Print critical data and executables versions.
  - &print-system-info
    name: Print system information
    command: |
             echo "Linux release: "; cat /etc/issue
             echo "Current user: "; whoami
             echo "Current directory: "; pwd
             echo "Ruby version: "; ruby -v
             echo "Node version: "; node -v
             echo "Yarn version: "; yarn --version
             echo "Bundler version: "; bundle --version
  - &lint-js
    name: Linting of JS
    command: yarn start eslint

  - &lint-ruby
    name: Linting of Ruby
    command: bundle exec rubocop

  - &format
    name: Check formatting
    command: yarn start format.listDifferent

  # Install/update Node modules for renderer package unless existing set of modules is satisfying Yarn.
  - &install-package-node-modules
    name: Install Node modules with Yarn for renderer package
    command: |
      sudo yarn global add yalc
      yarn install --no-progress --no-emoji

  # Install/update Node modules for dummy app unless existing set of modules is satisfying Yarn.
  - &install-dummy-app-node-modules
    name: Install Node modules with Yarn for dummy app
    command: cd spec/dummy && yarn install --no-progress --no-emoji

  # Install ruby gems unless existing set of gems is satisfying bundler.
  - &install-dummy-app-ruby-gems
    name: Install Ruby Gems for dummy app
    command: |
      gem install bundler -v "2.2.28"
      echo "Bundler version: "; bundle --version
      bundle config set --local path 'vendor/bundle'
      bundle config set --local disable_checksum_validation true
      cd spec/dummy && bundle lock --add-platform 'x86_64-linux' && bundle _2.2.28_ check || bundle _2.2.28_ install --jobs=4 --retry=3

  # Install ruby gems unless existing set of gems is satisfying bundler.
  - &install-package-ruby-gems
    name: Install Ruby Gems for package
    command: |
      gem install bundler -v "2.2.28"
      echo "Bundler version: "; bundle --version
      bundle config set --local path 'vendor/bundle'
      bundle config set --local disable_checksum_validation true
      bundle _2.2.28_ check || bundle _2.2.28_ install --jobs=4 --retry=3

  # Restore node_modules dir from cache using yarn.lock checksum as a key.
  - &restore-package-node-modules-cache
    name: Restore cached node_modules directory
    keys:
      - v4-package-node-modules-cache-{{ checksum "yarn.lock" }}

  # Restore spec/dummy/node_modules dir from cache using yarn.lock checksum as a key.
  - &restore-dummy-app-node-modules-cache
    name: Restore cached spec/dummy/node_modules directory
    keys:
      - v4-dummy-app-node-modules-cache-{{ checksum "spec/dummy/yarn.lock" }}

  # Restore vendor/bundle dir from cache using Gemfile.lock checksum as a key.
  - &restore-dummy-app-gem-cache
    name: Restore cached Ruby Gems for dummy app
    keys:
      - v4-dummy-app-gem-cache-{{ checksum "spec/dummy/Gemfile.lock" }}

  # Restore vendor/bundle dir from cache using react_on_rails_pro.gemspec checksum as a key.
  - &restore-package-gem-cache
    name: Restore cached Ruby Gems for package
    keys:
      - v4-package-app-gem-cache-{{ checksum "react_on_rails_pro.gemspec" }}

    # NOTE: Sometimes CI generated docker images are not updated in time to keep up with the minimum required
    # by chromedriver versions of Chrome. Just bump here Chrome version if chromedriver raises errors
  - &install-latest-chrome
    name: Ensure minimum required Chrome version
    command: |
      echo -e "Installed $(google-chrome --version)\n"
      MINIMUM_REQUIRED_CHROME_VERSION=75
      INSTALLED_CHROME_MAJOR_VERSION="$(google-chrome --version | tr ' .' '\t' | cut -f3)"
      if [[ $INSTALLED_CHROME_MAJOR_VERSION < $MINIMUM_REQUIRED_CHROME_VERSION ]]; then
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install google-chrome-stable
        echo -e "\nInstalled $(google-chrome --version)"
      fi

jobs:
  # Lint all
  lint-js-and-ruby:
    docker:
      - image: &docker_image circleci/ruby:2.7-node-browsers
    steps:
      - checkout
      - run: *print-system-info
      - restore_cache: *restore-package-node-modules-cache
      - restore_cache: *restore-package-gem-cache
      - run: *install-package-ruby-gems
      - run: *lint-ruby
      - run: *lint-js
      - run: *format

  # Install Node modules for Renderer package with Yarn and save them to chache.
  install-package-node-packages:
    docker:
      - image: *docker_image
    steps:
      - checkout
      - run: *print-system-info
      - restore_cache: *restore-package-node-modules-cache
      - run: *install-package-node-modules
      - save_cache:
          name: Save root node_modules to cache
          key: v4-package-node-modules-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

  # Install Node modules for dummy app with Yarn and save them to cache.
  install-dummy-app-node-packages:
    docker:
      - image: *docker_image
    steps:
      - checkout
      - run: *print-system-info
      - restore_cache: *restore-dummy-app-node-modules-cache
      - run: *install-package-node-modules
      - run: *install-dummy-app-node-modules
      - save_cache:
          name: Save spec/dummy/node_modules to cache
          key: v4-dummy-app-node-modules-cache-{{ checksum "spec/dummy/yarn.lock" }}
          paths:
            - spec/dummy/node_modules

  # Install Ruby gems for package with Bundler and save them to cache.
  install-package-ruby-gems:
    docker:
      - image: *docker_image
    steps:
      - checkout
      - run: *print-system-info
      - restore_cache: *restore-package-gem-cache
      - run: *install-package-ruby-gems
      - save_cache:
          name: Save dummy app ruby gems to cache
          key: v4-package-app-gem-cache-{{ checksum "react_on_rails_pro.gemspec" }}
          paths:
            - vendor/bundle

  # Install Ruby gems for dummy app with Bundler and save them to cache.
  install-dummy-app-ruby-gems:
    docker:
      - image: *docker_image
    steps:
      - checkout
      - run: *print-system-info
      - restore_cache: *restore-dummy-app-gem-cache
      - run: *install-dummy-app-ruby-gems
      - save_cache:
          name: Save dummy app ruby gems to cache
          key: v4-dummy-app-gem-cache-{{ checksum "spec/dummy/Gemfile.lock" }}
          paths:
            - spec/dummy/vendor/bundle

  # Build client and server bundles for dummy app with Webpack and save them to cache.
  # NOTE: keeping around this cache in case we have multiple rspec suites in the future to tests
  # different node renderers.
  build-dummy-app-webpack-test-bundles:
    docker:
      - image: *docker_image
    steps:
      - checkout
      - run: *print-system-info
      - restore_cache: *restore-dummy-app-node-modules-cache
      - run: *install-package-node-modules
      - run: *install-dummy-app-node-modules
      - run: *install-dummy-app-ruby-gems
      - run:
          name: Generate file-system based entrypoints
          command: cd spec/dummy && bundle exec rake react_on_rails:generate_packs
      - run:
          name: Build test bundles for dummy app
          command: cd spec/dummy && yarn run build:test
      - save_cache:
          name: Save test webpack bundles to cache (for build number checksum used by rspec job)
          key: v4-dummy-app-webpack-bundle-{{ .Revision }}
          paths:
            - spec/dummy/public/webpack/test

  # Run JS unit tests for Renderer package.
  package-js-tests:
    docker:
      - image: *docker_image
    steps:
      - checkout
      - run: *print-system-info
      - restore_cache: *restore-package-node-modules-cache
      - run: *install-package-node-modules
      - run:
          name: Run JS unit tests for Renderer package
          command: yarn test

  rspec-package-specs:
    docker:
      - image: *docker_image
    steps:
      - checkout
      - run: *print-system-info
      - restore_cache: *restore-package-gem-cache
      - run: *install-package-ruby-gems
      - run:
          name: Run rspec tests
          command: |
            bundle exec rspec spec/react_on_rails_pro
      - store_test_results:
          path: ~/rspec
      - store_artifacts:
          path: log/test.log

  # Start Renderer and run RSpec test suite for dummy app.
  # NOTES:
  # Seems that we cannot use symlinks (yarn link) with caches for the main renderer package
  # react-on-rails-pro-node-renderer. Consequently, we just reinstall the top level, renderer, node packages
  # as well as the
  rspec-dummy-app-node-renderer:
    docker:
      - image: *docker_image
    steps:
      - checkout
      - run: *print-system-info
      - restore_cache: *restore-package-gem-cache
      - restore_cache: *restore-dummy-app-gem-cache
      - run: rm -rf spec/dummy/public/webpack
      - restore_cache:
          name: Restore cached webpack bundles for dummy app
          key: v4-dummy-app-webpack-bundle-{{ .Revision }}
      - run: *install-dummy-app-ruby-gems
      - run: *install-package-node-modules
      - run: *install-latest-chrome
      - run: *install-dummy-app-node-modules
      - run:
          name: Generate file-system based entrypoints
          command: cd spec/dummy && bundle exec rake react_on_rails:generate_packs
      - run:
          name: Run Node renderer in a background
          command: cd spec/dummy && yarn run node-renderer
          background: true
      - run:
          name: Run rspec tests
          command: |
            cd spec/dummy && RAILS_ENV=test bundle exec rspec \
                                              --format RspecJunitFormatter \
                                              --out ~/rspec/rspec.xml \
                                              --format documentation
      - store_test_results:
          path: ~/rspec
      - store_artifacts:
          path: spec/dummy/tmp/screenshots
      - store_artifacts:
          path: spec/dummy/log/test.log
      - store_artifacts:
          path: spec/dummy/yarn-error.log

workflows:
  version: 2
  build-and-test:
    jobs:
      - install-package-node-packages
      - install-package-ruby-gems
      - install-dummy-app-node-packages
      - install-dummy-app-ruby-gems
      - lint-js-and-ruby:
          requires:
            - install-package-node-packages
            - install-package-ruby-gems
      - build-dummy-app-webpack-test-bundles:
          requires:
            - install-package-node-packages
            - install-dummy-app-node-packages
            - install-dummy-app-ruby-gems
      - package-js-tests:
          requires:
            - install-package-node-packages
      - rspec-package-specs:
          requires:
            - install-package-ruby-gems
      - rspec-dummy-app-node-renderer:
          requires:
            - install-package-ruby-gems
            - build-dummy-app-webpack-test-bundles
